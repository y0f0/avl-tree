from unittest import TestCase
from bst import BST, Node


class TestNode(TestCase):
    def test_init(self):
        node1 = Node(5)
        node2 = Node(4)
        assert (node1.data == 5)
        assert (node1.left == None)
        assert (node1.right == None)
        assert (node2.data == 4)
        assert (node2.left == None)
        assert (node2.right == None)


class TestBST(TestCase):
    def setUp(self):
        self.bst = BST()
        self.node_5 = Node(-5)
        self.node_4 = Node(-4)
        self.node_3 = Node(-3)
        self.node_2 = Node(-2)
        self.node_1 = Node(-1)
        self.node0 = Node(0)
        self.node1 = Node(1)
        self.node2 = Node(2)
        self.node3 = Node(3)
        self.node4 = Node(4)
        self.node5 = Node(5)

        self.mytree = BST()
        self.mytree.insert(5)
        self.mytree.insert(2)
        self.mytree.insert(3)
        self.mytree.insert(1)
        self.mytree.insert(4)
        self.mytree.insert(0)
        self.mytree.insert(2.5)
        self.mytree.insert(8)
        self.mytree.insert(9)
        self.mytree.insert(6)
        self.mytree.insert(4.5)

    def test_insert(self):
        assert (self.bst.root == None)
        self.bst.insert(self.node0.data)
        assert (self.bst.root.data == self.node0.data)
        self.bst.insert(self.node3.data)
        assert (self.bst.root.right.data == self.node3.data)
        self.bst.insert(self.node5.data)
        assert (self.bst.root.right.data == self.node5.data)
        self.bst.insert(self.node4.data)
        assert (self.bst.root.right.left.data == self.node4.data)
        self.bst.insert(self.node2.data)
        assert (self.bst.root.left.right.data == self.node2.data)
        self.bst.insert(self.node1.data)
        assert (self.bst.root.left.data == self.node1.data)

    def test_delete(self):
        assert (self.mytree.exists(0) == True)
        assert (self.mytree.to_list_from_root() == [0, 1, 2, 2.5, 3, 4, 4.5, 5, 6, 8, 9])
        self.mytree.delete(0)
        assert (self.mytree.exists(0) == False)

        assert (self.mytree.to_list_from_root() == [1, 2, 2.5, 3, 4, 4.5, 5, 6, 8, 9])

        assert (self.mytree.exists(4.5) == True)
        self.mytree.delete(4.5)
        assert (self.mytree.exists(4.5) == False)

        assert (self.mytree.to_list_from_root() == [1, 2, 2.5, 3, 4, 5, 6, 8, 9])

        self.mytree.insert(0)
        assert (self.mytree.to_list_from_root() == [0, 1, 2, 2.5, 3, 4, 5, 6, 8, 9])
        assert (self.mytree.exists(1) == True)
        self.mytree.delete(1)
        assert (self.mytree.exists(1) == False)
        assert (self.mytree.exists(0) == True)
        assert (self.mytree.to_list_from_root() == [0, 2, 2.5, 3, 4, 5, 6, 8, 9])

        # RESET
        self.setUp()
        assert (self.mytree.to_list_from_root() == [0, 1, 2, 2.5, 3, 4, 4.5, 5, 6, 8, 9])
        self.mytree.delete(5)
        assert (self.mytree.to_list_from_root() == [0, 1, 2, 2.5, 3, 4, 4.5, 6, 8, 9])
        self.mytree.delete(6)
        assert (self.mytree.to_list_from_root() == [0, 1, 2, 2.5, 3, 4, 4.5, 8, 9])
        self.mytree.delete(4.5)
        assert (self.mytree.to_list_from_root() == [0, 1, 2, 2.5, 3, 4, 8, 9])
        self.mytree.delete(4)
        assert (self.mytree.to_list_from_root() == [0, 1, 2, 2.5, 3, 8, 9])
        self.mytree.delete(3)
        assert (self.mytree.to_list_from_root() == [0, 1, 2, 2.5, 8, 9])
        self.mytree.delete(2.5)
        assert (self.mytree.to_list_from_root() == [0, 1, 2, 8, 9])
        self.mytree.delete(8)
        assert (self.mytree.to_list_from_root() == [0, 1, 2, 9])
        self.mytree.delete(2)
        assert (self.mytree.to_list_from_root() == [0, 1, 9])
        self.mytree.delete(1)
        assert (self.mytree.to_list_from_root() == [0, 9])
        self.mytree.delete(0)
        assert (self.mytree.to_list_from_root() == [9])

        # RESET
        self.setUp()
        self.mytree.delete(4.5)
        self.mytree.delete(4)
        self.mytree.delete(2.5)
        self.mytree.delete(3)
        self.mytree.delete(0)
        self.mytree.delete(1)
        self.mytree.delete(2)
        self.mytree.delete(6)
        assert (self.mytree.to_list_from_root() == [5, 8, 9])
        self.mytree.delete(5)
        assert (self.mytree.to_list_from_root() == [8, 9])
        self.mytree.delete(8)
        assert (self.mytree.to_list_from_root() == [9])

    def test_exists(self):
        assert (self.mytree.exists(5) == True)
        assert (self.mytree.exists(4) == True)
        assert (self.mytree.exists(3) == True)
        assert (self.mytree.exists(2) == True)
        assert (self.mytree.exists(1) == True)
        assert (self.mytree.exists(0) == True)
        assert (self.mytree.exists(9) == True)

        assert (self.mytree.exists(80) == False)
        assert (self.mytree.exists(-5) == False)
        assert (self.mytree.exists(-10) == False)
        assert (self.mytree.exists(230) == False)
        assert (self.mytree.exists(340) == False)

    def test_to_list_from_root(self):
        assert (self.bst.to_list_from_root() == [])

        self.bst.insert(5)
        self.bst.insert(2)
        self.bst.insert(8)
        self.bst.insert(6)
        self.bst.insert(1)
        self.bst.insert(3)
        self.bst.insert(0)
        self.bst.insert(4)
        self.bst.insert(9)
        assert (self.bst.to_list_from_root() == [0, 1, 2, 3, 4, 5, 6, 8, 9])
        assert (self.mytree.to_list_from_root() == [0, 1, 2, 2.5, 3, 4, 4.5, 5, 6, 8, 9])

    def test_next(self):  # [0, 1, 2, 2.5, 3, 4, 4.5, 5, 6, 8, 9]
        assert (self.mytree.next(-1).data == 0)
        assert (self.mytree.next(0).data == 1)
        assert (self.mytree.next(1).data == 2)
        assert (self.mytree.next(2).data == 2.5)
        assert (self.mytree.next(2.5).data == 3)
        assert (self.mytree.next(3).data == 4)
        assert (self.mytree.next(4).data == 4.5)
        assert (self.mytree.next(4.5).data == 5)
        assert (self.mytree.next(5).data == 6)
        assert (self.mytree.next(6).data == 8)
        assert (self.mytree.next(8).data == 9)
        assert (self.mytree.next(9) is None)

    def test_prev(self):
        assert (self.mytree.prev(0) is None)
        assert (self.mytree.prev(1).data == 0)
        assert (self.mytree.prev(2).data == 1)
        assert (self.mytree.prev(2.5).data == 2)
        assert (self.mytree.prev(3).data == 2.5)
        assert (self.mytree.prev(4).data == 3)
        assert (self.mytree.prev(4.5).data == 4)
        assert (self.mytree.prev(5).data == 4.5)
        assert (self.mytree.prev(6).data == 5)
        assert (self.mytree.prev(8).data == 6)
        assert (self.mytree.prev(9).data == 8)
        assert (self.mytree.prev(10).data == 9)
